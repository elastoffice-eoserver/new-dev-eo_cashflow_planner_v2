# -*- coding: utf-8 -*-
"""
Wizard Tests
============

Tests for cashflow planning wizards (overview, forecast, budget analysis)

Pattern: patterns/testing/odoo7-unittest.py

Author: Claude Code
Date: 2025-10-20
"""

from .common import CashflowPlannerTestCase


class TestWizards(CashflowPlannerTestCase):
    """Test cases for Cashflow Planning Wizards"""

    def setUp(self):
        super(TestWizards, self).setUp()
        self.wizard_overview = self.registry('eo.cfp.wizard.overview')
        self.wizard_forecast = self.registry('eo.cfp.wizard.forecast')
        self.wizard_budget = self.registry('eo.cfp.wizard.budget')

        # Create test data
        self.category_id = self.create_category('Test Expenses', 'payment')
        self.income_cat_id = self.create_category('Test Income', 'income')

    def test_01_overview_wizard_create(self):
        """Test creating overview wizard"""
        wizard_id = self.wizard_overview.create(
            self.cr, self.uid,
            {
                'date_from': self.today.strftime('%Y-%m-01'),
                'date_to': self.next_month.strftime('%Y-%m-%d'),
            },
            self.context
        )

        self.assertIsNotNone(wizard_id)

    def test_02_overview_wizard_default_dates(self):
        """Test overview wizard default date calculation"""
        defaults = self.wizard_overview.default_get(
            self.cr, self.uid,
            ['date_from', 'date_to'],
            self.context
        )

        self.assertIn('date_from', defaults)
        self.assertIn('date_to', defaults)

    def test_03_forecast_wizard_create(self):
        """Test creating forecast wizard"""
        wizard_id = self.wizard_forecast.create(
            self.cr, self.uid,
            {
                'date_from': self.today.strftime('%Y-%m-%d'),
                'forecast_months': 3,
            },
            self.context
        )

        self.assertIsNotNone(wizard_id)

    def test_04_forecast_wizard_date_calculation(self):
        """Test forecast wizard date_to calculation"""
        result = self.wizard_forecast.onchange_forecast_months(
            self.cr, self.uid, [],
            self.today.strftime('%Y-%m-%d'),
            6,  # 6 months
            context=self.context
        )

        self.assertIn('value', result)
        if 'date_to' in result['value']:
            self.assertIsNotNone(result['value']['date_to'])

    def test_05_budget_wizard_create(self):
        """Test creating budget analysis wizard"""
        wizard_id = self.wizard_budget.create(
            self.cr, self.uid,
            {
                'date_from': self.today.strftime('%Y-%m-01'),
                'date_to': self.next_month.strftime('%Y-%m-%d'),
            },
            self.context
        )

        self.assertIsNotNone(wizard_id)

    def test_06_wizard_with_real_data(self):
        """Test wizard with actual planned items"""
        # Create some planned items
        self.create_planned_item(
            self.income_cat_id, 5000.00,
            type_val='income',
            planned_date=self.tomorrow.strftime('%Y-%m-%d')
        )
        self.create_planned_item(
            self.category_id, 2000.00,
            type_val='payment',
            planned_date=self.next_week.strftime('%Y-%m-%d')
        )

        # Create wizard
        wizard_id = self.wizard_overview.create(
            self.cr, self.uid,
            {
                'date_from': self.today.strftime('%Y-%m-01'),
                'date_to': self.next_month.strftime('%Y-%m-%d'),
            },
            self.context
        )

        self.assertIsNotNone(wizard_id)

    def test_07_forecast_with_recurring_items(self):
        """Test forecast wizard considers recurring items"""
        # Create recurring item
        self.create_recurring_item(
            self.category_id, 5000.00,
            recurrence_type='monthly',
            state='active'
        )

        wizard_id = self.wizard_forecast.create(
            self.cr, self.uid,
            {
                'date_from': self.today.strftime('%Y-%m-%d'),
                'forecast_months': 3,
            },
            self.context
        )

        self.assertIsNotNone(wizard_id)

    def test_08_budget_wizard_with_budgets(self):
        """Test budget wizard with actual budgets"""
        # Create budget with some usage
        budget_id = self.create_budget(
            self.category_id, 10000.00,
            period_start=self.today.strftime('%Y-%m-01'),
            period_end=self.next_month.strftime('%Y-%m-%d')
        )

        # Create planned items
        self.create_planned_item(
            self.category_id, 3000.00,
            planned_date=self.tomorrow.strftime('%Y-%m-%d')
        )

        wizard_id = self.wizard_budget.create(
            self.cr, self.uid,
            {
                'date_from': self.today.strftime('%Y-%m-01'),
                'date_to': self.next_month.strftime('%Y-%m-%d'),
            },
            self.context
        )

        self.assertIsNotNone(wizard_id)

    def test_09_wizard_action_view_results(self):
        """Test wizard action methods return proper action dict"""
        wizard_id = self.wizard_overview.create(
            self.cr, self.uid,
            {
                'date_from': self.today.strftime('%Y-%m-01'),
                'date_to': self.next_month.strftime('%Y-%m-%d'),
            },
            self.context
        )

        # Try to call action (if method exists)
        if hasattr(self.wizard_overview, 'action_view_results'):
            result = self.wizard_overview.action_view_results(
                self.cr, self.uid, [wizard_id], self.context
            )
            self.assertIsInstance(result, dict)

    def test_10_wizard_transient_model(self):
        """Test that wizards are transient models"""
        # Wizards should use osv_memory (transient)
        # This test verifies the wizard can be created and deleted
        wizard_id = self.wizard_overview.create(
            self.cr, self.uid,
            {
                'date_from': self.today.strftime('%Y-%m-01'),
                'date_to': self.next_month.strftime('%Y-%m-%d'),
            },
            self.context
        )

        # Unlink wizard
        self.wizard_overview.unlink(self.cr, self.uid, [wizard_id])

        # Should not exist anymore
        exists = self.wizard_overview.exists(self.cr, self.uid, [wizard_id])
        self.assertFalse(exists)
